pipeline {
    agent any
    parameters {
        gitParameter branchFilter: '.*', 
                     defaultValue: 'master', 
                     name: 'BRANCH_NAME', 
                     type: 'PT_BRANCH', 
                     description: 'WÃ¤hle einen Branch aus'
        choice(name: 'Environment', choices: ['prod'], defaultValue: 'prod', description: 'Testumgebung (prod oder test)')
        choice(name: 'Tag', choices: ['@SMOKE','@LOGIN','@LOGIN@','@REGISTRATION','@ECOMMERCE','ALLtests'] defaultValue: '@SMOKE', description: 'Test-Tag')
    }
    stages {
        stage('Checkout Branch') {
            steps {
                script {
                    // branchName = letzter Teil (z. B. "feature-branch")
                    def branchName = params.BRANCH_NAME.tokenize('/').last()
                    echo "Checking out branch: ${branchName}"

                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${branchName}"]],
                        userRemoteConfigs: [[url: 'https://github.com/rerdm/PlaywrightTypeScriptFramework.git']]
                    ])
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }
        stage('Run Playwright Tests') {
            steps {
                script {
                    def npmCommand = "npm run test:${params.Environment}:tc"
                    if (params.Headed) {
                        npmCommand = npmCommand + ":headed"
                    }
                    if (params.Tag != 'ALLtests') {
                        npmCommand = npmCommand + " \"${params.Tag}\""
                    }
                    echo "Running command: ${npmCommand}"
                    try {
                        bat "${npmCommand}"
                        // Playwright Report als Artifact archivieren
                        archiveArtifacts artifacts: 'playwright-report/**', allowEmptyArchive: true
                    } catch (err) {
                        echo "[ERROR] Playwright Tests failed: ${err}"
                        currentBuild.result = 'FAILURE'
                        // Playwright Report auch bei Fehlern archivieren
                        archiveArtifacts artifacts: 'playwright-report/**', allowEmptyArchive: true
                    }
                }
            }
        }
        stage('Create and Upload ZIP Artifact') {
            steps {
                script {
                    def timestamp = new Date().format("yyyy-MM-dd_HH-mm")
                    def zipFileName = "playwright-report_${timestamp}.zip"

                    echo "Creating ZIP file: ${zipFileName}"
                    bat "powershell Compress-Archive -Path playwright-report/* -DestinationPath ${zipFileName}"

                    echo "Archiving ZIP file: ${zipFileName}"
                    archiveArtifacts artifacts: zipFileName, allowEmptyArchive: false
                }
            }
        }
    }
}

