pipeline {
    agent any
    parameters {
        gitParameter branchFilter: '.*', 
                     defaultValue: 'master', 
                     name: 'BRANCH_NAME', 
                     type: 'PT_BRANCH', 
                     description: 'WÃ¤hle einen Branch aus'
        string(name: 'paramter_for_test', defaultValue: '', description: 'Parameter to test', trim: true)
        choice(name: 'Environment', choices: ['prod'], description: 'Testing Environment')
        booleanParam(name: 'Headles', defaultValue: false, description: 'Run test in headles mode')
        booleanParam(name: 'SEND_EMAIL', defaultValue: false, description: 'Send email notification after tests')
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    // Clean previous test results
                    bat 'if exist "test-results" rmdir /s /q "test-results"'
                    bat 'if exist "allure-results" rmdir /s /q "allure-results"'
                    bat 'if exist "playwright-report" rmdir /s /q "playwright-report"'
                    bat 'mkdir test-results'
                }
            }
        }
        stage('Checkout Branch') {
            steps {
                script {
                    // Sicherstellen, dass BRANCH_NAME korrekt initialisiert ist
                    def branchName = params.BRANCH_NAME?.tokenize('/')?.last() ?: 'master'
                    echo "Checking out branch: ${branchName}"

                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${branchName}"]],
                        userRemoteConfigs: [[url: 'https://github.com/rerdm/PlaywrightTypeScriptFramework.git']]
                    ])
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }
        stage('Run Playwright Tests') {
            steps {
                script {
                    def npmCommand = "npx playwright test ${params.paramter_for_test}"
                    echo "Running command: ${npmCommand}"
                    
                    // Always continue to post actions, even if tests fail
                    def testResult = bat(script: "${npmCommand}", returnStatus: true)
                    
                    if (testResult != 0) {
                        echo "[WARNING] Some Playwright tests failed (exit code: ${testResult})"
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo "[SUCCESS] All Playwright tests passed"
                    }
                }
            }
            post {
                always {
                    script {
                        // Publish JUnit XML test results (only if file exists)
                        if (fileExists('test-results/junit-report.xml')) {
                            junit 'test-results/junit-report.xml'
                        }
                        
                        // Archive HTML report (only if directory exists)
                        if (fileExists('playwright-report')) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'playwright-report',
                                reportFiles: 'index.html',
                                reportName: 'Playwright HTML Report'
                            ])
                        }
                        
                        // TODO: Configure Allure CLI in Jenkins to enable this
                        // if (fileExists('allure-results')) {
                        //     allure([
                        //         includeProperties: false,
                        //         jdk: '',
                        //         properties: [],
                        //         reportBuildPolicy: 'ALWAYS',
                        //         results: [[path: 'allure-results']]
                        //     ])
                        // }
                    }
                }
            }
        }
        stage('Create and Upload ZIP Artifact') {
            steps {
                script {
                    def timestamp = new Date().format("yyyy-MM-dd_HH-mm")
                    def zipFileName = "playwright-report_${timestamp}.zip"

                    echo "Creating ZIP file: ${zipFileName}"
                    bat "powershell Compress-Archive -Path playwright-report/* -DestinationPath ${zipFileName}"

                    echo "Archiving ZIP file: ${zipFileName}"
                    archiveArtifacts artifacts: zipFileName, allowEmptyArchive: false
                }
            }
        }
        stage('Send Email Notification') {
            when {
                expression { params.SEND_EMAIL == true }
            }
            steps {
                script {

                    def subject = "Jenkins Job: ${env.JOB_NAME} - Branch ${BRANCH_NAME} - Build #${env.BUILD_NUMBER}"
                    def body = """The Jenkins job has completed.

Status: ${currentBuild.currentResult}

Check the Jenkins job details here: ${env.BUILD_URL}

}

"""

                    emailext (
                        to: 'rene.erdmann1987@gmail.com,reneerdmann87@web.de',
                        from: 'Jenkins@no-reply.com',
                        subject: subject,
                        body: body
                    )
                }
            }
        }
    }
}

