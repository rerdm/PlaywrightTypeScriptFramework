pipeline {
    agent any // Use any available agent to run the pipeline

    parameters {
        // Dropdown parameter to select the environment (staging or local)
        choice(name: 'Environment', choices: ['staging', 'local'], description: 'Select the environment')
        
        // Dropdown parameter to select the specific test selection by tag or ALLtests for running all tests
        choice(name: 'Tag', choices: ['@SMOKE','ALLTests'], description: 'Select the specific test selection by tag or ALLtests for running all tests')
        
        // Boolean parameter to decide whether to run tests in headed mode
        booleanParam(name: 'Headed', defaultValue: false, description: 'Run tests in headed mode?')
    }

    stages {

        stage('Display Jenkis variables') { // Stage to install npm dependencies and Playwright browsers
            steps {
                script {
                    echo "#################################################################################"
                    echo "# JENKINS VARIABLES            ##################################################"

                    echo "Jenkins WORKSPACE variable    : ${env.WORKSPACE}"
                    echo "Jenkins BUILD_NUMBER          : ${env.BUILD_NUMBER}"
                    echo "Jenkins JOB_NAME              : ${env.JOB_NAME}"
                    echo "Jenkins BUILD_ID              : ${env.BUILD_ID}"
                    echo "Jenkins NODE_NAME             : ${env.NODE_NAME}"
                    echo "Jenkins EXECUTOR_NUMBER       : ${env.EXECUTOR_NUMBER}"
                    echo "Jenkins BUILD_URL             : ${env.BUILD_URL}"
                    echo "Jenkins GIT_COMMIT            : ${env.GIT_COMMIT}"
                    echo "#################################################################################"
                }
            }
        }

        stage('Install Dependencies') { // Stage to install npm dependencies and Playwright browsers
            steps {
                script {
                    // Install npm dependencies
                    bat 'npm install'
                    // Install Playwright browsers
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run Playwright Tests') { // Stage to execute Playwright tests
            steps {
                script {
                    // Construct the base npm command for running tests based on the selected environment
                    def npmCommand = "npm run test:${params.Environment}:tc"
                    
                    // Append ":headed" to the command if the Headed parameter is true
                    if (params.Headed) {
                        npmCommand = npmCommand + ":headed"
                    }

                    // Add the specified tag to the command

                    if (params.Tag != 'ALLtests') {
                        npmCommand = npmCommand + " \"${params.Tag}\""
                    }

                    // Print the constructed command to the console
                    echo "Running command: ${npmCommand}"
                            try {
                                bat "${npmCommand}" // Windows
                            } catch (err) {
                                echo "[ERROR] Playwright Tests failed: ${err}"
                                currentBuild.result = 'FAILURE'
                                throw err
                            }
                    bat 'node utils/generateTestEmailReport.js'
                }
            }
                stage('Send Test Report Email') {
                    steps {
                        script {
                            echo "Sende Test Report Email..."
                            try {
                                bat 'node utils/generateTestEmailReport.js'
                            } catch (err) {
                                echo "[ERROR] Test Report Email konnte nicht gesendet werden: ${err}"
                                currentBuild.result = 'FAILURE'
                                throw err
                            }
                        }
                    }
                }
        }
    }

    post { // Ensure this is correctly positioned at the pipeline level
        always {
            echo "#################################################################################"
            echo "# BUILD INFORMATION  currentBuild.xx                                           #"
            echo "#################################################################################"
            echo "Build Result                              : ${currentBuild.result}"
            echo "currentBuild.displayName                  : ${currentBuild.displayName}"
            echo "currentBuild.fullDisplayName              : ${currentBuild.fullDisplayName}"
            echo "currentBuild.id                           : ${currentBuild.id}"
            echo "currentBuild.number                       : ${currentBuild.number}"
            echo "currentBuild.projectName                  : ${currentBuild.projectName}"
            echo "currentBuild.description                  : ${currentBuild.description}"
            echo "currentBuild.duration                     : ${currentBuild.duration}"
            echo "currentBuild.durationString               : ${currentBuild.durationString}"
            echo "currentBuild.startTimeInMillis            : ${currentBuild.startTimeInMillis}"
            echo "currentBuild.timeInMillis                 : ${currentBuild.timeInMillis}"
            echo "currentBuild.absoluteUrl                  : ${currentBuild.absoluteUrl}"
            echo "currentBuild.getBuildCauses()             : ${currentBuild.getBuildCauses()}"
            echo "currentBuild.getBuildCauses().toString()  : ${currentBuild.getBuildCauses().toString()}"
            echo "#################################################################################"
        }
    }
}




